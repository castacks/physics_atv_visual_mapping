# example terrain estimation config, i.e. converting from localmapping representation to 2.5d
# note that we can perform terrain estimation on both BEV and voxel localmapping
# but some blocks only work on BEV or voxel
#input should be a list of blocks to run in sequence

-
    ## compute min/max elevation of voxel grid per cell
    type: elevation_stats
    args:
        use_voxel_centers: false

-
    ## compute average porosity (hits/(hits+misses)) in a BEV column
    type: porosity
    args: {}

-
    ## filter out non-smooth changes in the elevation map
    type: elevation_filter
    args:
        input_layer: min_elevation
        cnt_layer: num_voxels

        height_low_thresh: -3.0 #cells this far below their neighbors are not terrain
        height_high_thresh: 0.5 #cells this far above their neighbors are not terrain

        kernel_params:
            kernel_type: gaussian #one of {gaussian/box} the kernel type to use for inflation

            kernel_radius: 2. #kernel radius in m
            kernel_sharpness: 5. #sharpness of (Gaussian) kernel

            # kernel_radius: 0.25 #kernel radius in m
            # kernel_sharpness: 0.5 #sharpness of (Gaussian) kernel

-
    ## fill in holes in elevation map with 2d conv
    type: terrain_inflation
    args:
        input_layer: min_elevation_filtered
        mask_layer: min_elevation_filtered_mask

        thresh: 0.05 #at least this frac of neighboring cells in the kernel must be observed

        kernel_params:
            kernel_type: gaussian #one of {gaussian/box} the kernel type to use for inflation

            kernel_radius: 5. #kernel radius in m
            kernel_sharpness: 2. #sharpness of (Gaussian) kernel

            # kernel_radius: 0.5 #kernel radius in m
            # kernel_sharpness: 1.0 #sharpness of (Gaussian) kernel

- 
    ## refine terrain estimate using Markov Random Field
    type: mrf_terrain_estimation
    args: 
        input_layer: min_elevation_filtered_inflated
        mask_layer: min_elevation_filtered_inflated_mask

        itrs: 5   #num updates
        alpha: 10. #weight on the measurement update
        beta: 1.  #weight on the neighbor update
        lr: 0.05   #learning rate

        kernel_params:
            kernel_type: gaussian #one of {gaussian/box} the kernel type to use for inflation

            kernel_radius: 1. #kernel radius in m
            kernel_sharpness: 2. #sharpness of (Gaussian) kernel

            # kernel_radius: 0.5
            # kernel_sharpness: 1.0

- 
    ## compute slope as spatial derivatives of terrain
    type: slope
    args:
        input_layer: terrain
        mask_layer: min_elevation_filtered_inflated_mask
        radius: 0.25
        max_slope: 2.0
        kernel_type: scharr

-
    ## compute terrain normal vectors from slope values
    type: normals_sobel
    args:
        slope_x_layer: slope_x
        slope_y_layer: slope_y
        mask_layer: min_elevation_filtered_inflated_mask

-
    ## compute max height of voxels within overhang of terrain
    type: terrain_diff
    args:
        terrain_layer: terrain
        overhang: 2.0

-
    ## splat voxels within overhang of terrain into BEV
    type: terrain_aware_bev_feature_splat
    args:
        metainfo_key: vfm
        n_features: 16
        terrain_layer: terrain
        terrain_mask_layer: min_elevation_filtered_inflated_mask
        overhang: 2.0